*********************Katmanli MIMARI GIRIS***********************************
Temel de Uctane Katmanimiz vardir
Arayuz UI
Veri erisim DAL
Is Katman	BLL

-Solution Exploer dan yeni proje olusturdum
-Add New Project Class library .net framework seceriz (Katmalari Olusturacagiz)
	ProjeIsim.Entities
	ProjeIsim.DataAccess
	ProjeIsim.Business
	ProjeIsim.WebFormsUI



-Entitiesle baslayacagiz class1 sileriz
	iki klasor koyariz -Abstruct (Soyut nesneler- iheritance, Base, Abstruct class, interface olur)
					   -Concrete
-Bu iki kalsoru hem business hemde data access kopylariz 
-Entities>Concrete>Product class olusturduk DB uygun sekilde
-Data Access layer de class 1 siliyoruz.
-Data Access de veri erisimi yaziyoruz. DataAccess>Concrete>ProductDAL class olusturduk veri erismek icin
-Classlarin erisim icin public unutmayalim
-Data Access layeri entities referance ekliyoruz.
-Burda yapilari insat ediyoruz

				using System;
				using System.Collections.Generic;
				using System.Linq;
				using System.Text;
				using System.Threading.Tasks;
				using Northwind.Entities.Concrete;

				namespace Northwind.DataAccess.Concrete
				{
					public class ProductDal
					{
						//Tum Liste Donduren
						public List<Product> GetALL()
						{

						}

						//Id verdimiz product gostersin
						public Product Get(int id)
						{

						}

						//Ekleme Operasiyon
						public void Add(Product product)
						{

						}

						//Guncellem Operasiyon
						public void Update(Product product)
						{

						}
        
						//Delete Operasiyon
						public void Delete(Product product)
						{

						}


					}
				}


using block sayesind bir context aciyorduk 
-Entites concrete icinde bir class aciyoruz isimini NorthwindContext veriyoruz.
-NorthwindContext DB context ten iherit etmemiz icin Data Access Layer de entity framework refeance lazim.
-Data Access sag tiklayip manage nugget packages den packageleri ekliyoruz.

-simdi Northwindcontextte DB context ekleyebilirz

			namespace Northwind.DataAccess.Concrete
			{
				class NorthwindContext:DbContext
				{
					public DbSet<Product> Products { get; set; }
				}
			}
-Simdi North wind context product dal da kullanabilirz.
-Product DAL gidip using block ta context kullanacagiz
		
		public List<Product> GetALL()
        {
            using (NorthwindContext context=new NorthwindContext())
            {
                return context.Products.ToList();
            }
        }

-Genel bir sekilde operasiyonlari doldurduk.
-Business Gidip is kodlari cagirmamizi gerekiyor. (Burda isle ilgili Limitationlari koyacagiz.)


		******************************IS katman ve ArayUz Kodlanmasi**************************************
		******************************Business Layer and UI coding****************************************
-Yeni Class concrete icinde isimi Product Manager
	icinde gerekli operasiyonlari yazacagim
	DataAccessLayerle Benzerlik Gosterebilir ama Her zaman olmaz.

		 //icinde gerekli operasiyonlari yazacagim
	   public class ProductManager
		{
			ProductDal _productDal = new ProductDal();
			public List<Product> GetAll()
			{
				//DataAccessLayer kullanmamiz lazim
				//Business code / IS kod yazilir cekilen data kisiye uygun mudur bu kodu yazdiktan sonra veri erisim katamana ulasmaya calisacagiz.
           
				return _productDal.GetALL();
			}
		}
-AraYuze Gidip Get all Cagirmak Lazim, Form 1 gidip Data grid view eklecegiz.
	Form 1 Kod alana gideriz
	Load da Business Logic cagiriz. Data Acess Layeri cagirmak yasak
	gridview isimini dgwProduct yapariz

	 private void Form1_Load(object sender, EventArgs e)
        {
            ProductManager productManager= new ProductManager();
            dgwProduct.DataSource = productManager.GetAll();
        }

	Entities referans vermemiz gerekecektir.

-app.config gelip
startup tan once ekliyoruz

	  <connectionStrings>
		<add name="NorthwindContex" connectionString="server=(localdb)\mssqllocaldb;initial catalog=Northwind;integrated security=true" providerName="System.Data.SqlClient"/>

	  </connectionStrings>



  ******************************************Code Smells ****Kod Alisikanligi********************************
  Ara yuzde ara yuz kodu yazalim back endi bagli olmayalim.
  baska bir veritabani projenizde desteklemek istiyorsaniz.
  product dal da kodumuz dogru degil direk entity frameworku yapistirmisiz.
  Open close- bir uygulamaya yeni ozelik eklendiginde mevcutta olan kodlari dokunulmaz. Configuarsioyon haric.
  Baska bir veritabi desktedimiz bu kod cirkin hali gelecek.
  solid d hafrisye dependenciy
  Product manager _product baglidir. bir katman diger katmani newleyemez.
  ---Is katmanda baska bir nesneyi bile newleyemezsiniz. bagimlilik olur. burda product dala bagimliyiz. Farkli ORMlar destekledimizde kod cirken hali gelir (CODE smell) diyoruz buna.


  *****************************************Code Smell olanlari Refactor edilmesi****************************************************************
  ProductDal class da entityframework codlarla bir bagimlik olusturduk.

--DataAccessLayerde hangi ORM kullaniyorsam onun adinda bir kalsor aciyorum.
	DataAccess>Concrete>EntityFramework
	ProductDal ve Northwind COntext EntityFramework Kalsore koyariz. (namespacein sonuna .EntityFramework eklenir)


---NOTE:Eger bir class (ciplak duruyorsa) ineritance yoks Bu bad smell bir durum. Belki o an bir sorun yasamazsini yarin buyuk problemleri yasatabilir sizler.

--DataAccess Abstruct ta IProductDal interface olusturacagiz.
  ****Gerekli olan operasiyonlari burda yazariz*****


		  public interface IProductDal
		   {
			   //Tum Liste Donduren
				List<Product> GetALL();

			   //Id verdimiz product gostersin
			   Product Get(int id);

			   //Ekleme Operasiyon
			   void Add(Product product);

			   //Guncellem Operasiyon
			   void Update(Product product);
       

			   //Delete Operasiyon
			   void Delete(Product product);
			   
		   }

---Product Dal daki islemleri siliyoruz ve IProducta inherit ediyoruz. IProductDal uzerinde gelip Lampayi tiklayip implement  interface tiklariz. 
	Methodlari yerlestiriz.

			using Northwind.DataAccess.Abstruct;
			namespace Northwind.DataAccess.Concrete.EntityFramework
			{
				public class ProductDal:IProductDal
				{
        


				}
			}

---DataAccess de > Concrete ProductDal isimini EfProductDal deriz (Entity Framework implementasiyonudur)

	Note: Yarin baska bir ORM implementasiyonu yaptimizda dataAccesste yeni KLasor acip ekleriz.
	ornek NHibernate

	ve soyle deriz interface kullanarak implement ederiz

		using Northwind.DataAccess.Abstruct;
		namespace Northwind.DataAccess.Concrete.NHibernate
		{
			//Nh Nhibernateten geliyor
			class NhProductDal:IProductDal
			{

			}
		}


		ve interface implement etikten sonra 

				class NhProductDal : IProductDal
				{
					public void Add(Product product)
					{
						throw new NotImplementedException();
					}

					public void Delete(Product product)
					{
						throw new NotImplementedException();
					}

					public Product Get(int id)
					{
						throw new NotImplementedException();
					}

					public List<Product> GetALL()
					{
						throw new NotImplementedException();
					}

					public void Update(Product product)
					{
						throw new NotImplementedException();
					}
				}

Burda da NHibernate islemleri yapmis olduk.